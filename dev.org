Syed Khurram's Dev notes

[[https://github.com/skhurram][github]]

[[http://skhurram.github.com/][blog]]


* Shortcut keys

| Default binding | Function                        | Notes                                            |
|-----------------+---------------------------------+--------------------------------------------------|
| C-x d           | ido-dired                       | Change directory                                 |
| C-x C-s         |                                 | save file                                        |
| C-x C-w         |                                 | save as                                          |
| C-x k           |                                 | kill buffer                                      |
| C-x C-v         |                                 | reload file                                      |
| C-x C-q         |                                 | toggle readonly                                  |
| M-/ (or tab)    |                                 | complete word                                    |
|                 |                                 |                                                  |
| Editing         |                                 |                                                  |
| M-y             | cua-paste-pop                   | Show kill ring                                   |
|                 |                                 |                                                  |
|                 |                                 |                                                  |
| C-h m           |                                 | describe-mode   (current mode)                   |
| M-g M-g (M-g g) | goto-line                       | goto line                                        |
| C-l             | goto-line                       | goto line                                        |
| M-q             |                                 | reformat paragraph                               |
| C-x C-+         |                                 | increase font size                               |
| C-x C--         |                                 | decrease font size                               |
|                 |                                 | (0, +, - for further adjustment)                 |
| C-c C-e         |                                 | export / publish org                             |
| M-C-SPC         |                                 | Select from current position to end of next sexp |
| M-C-@           |                                 | -do-                                             |
|                 |                                 |                                                  |
|                 |                                 |                                                  |
| Search          |                                 |                                                  |
| C-s             |                                 | search forward regexp                            |
| C-r             |                                 | search backward                                  |
|                 | multi-occur-in-matching-buffers | Search all or some open buffers                  |
|                 | M-x occur                       | List occurrences                                 |
|                 | M-x rgrep                       | run grep                                         |
| C-M-s           |                                 | non-regex search                                 |
|                 |                                 |                                                  |
|                 |                                 |                                                  |
| M-%             | query-replace                   |                                                  |
|                 |                                 |                                                  |
| M-$             |                                 | spell check current word                         |
| M-x ispell      | ispell                          | spell check whole buffer                         |
|                 |                                 |                                                  |
| Navigation      |                                 |                                                  |
| C-u C-SPC       |                                 | move back in mark ring (local and global)        |
| C-x C-@         |                                 | -do-                                             |
|                 |                                 |                                                  |
| C-M-b           |                                 | move back by word (sexp in lisp mode)            |
| C-M-f           |                                 | move forward by word                             |
|                 |                                 |                                                  |
| C-M-b           |                                 | select from current point to start of word       |
| C-M-f           |                                 | select from current point to end of word         |
|                 |                                 |                                                  |
| C-M-d           |                                 | down in list                                     |
| C-M-u           |                                 | up in list                                       |
|                 |                                 |                                                  |
| C-M-a           |                                 | select from point to start of def                |
| C-M-e           |                                 | select from point to end of def                  |
|                 |                                 |                                                  |
| C-x r SPC <chr> | point-to-register               | Save current location in register <chr>          |
| C-x r j <chr>   |                                 | Go back to that location                         |
|                 | list-registers                  | Show a list of registers.                        |
|                 |                                 |                                                  |
| Macros          |                                 |                                                  |
|                 |                                 |                                                  |
| C-x (           |                                 | start recording macro                            |
| C-x )           |                                 | stop recording macro                             |
| C-x e           |                                 | execute macro (e to repeat)                      |
| C-u 10 C-x e    |                                 | execute macro 10 times                           |
|                 |                                 |                                                  |
| M-x calculator  | calculator                      | Interactive calculator                           |
|                 |                                 |                                                  |
| RAD / Eclipse   |                                 |                                                  |
| C-S-M           |                                 | Add import (java.util.Date -> Date and import    |

* emacs

** To do

How to describe any mode? Not necessarily the current mode.

winner-mode

*** TODO Sane redo

** Keyboard macros

C-x (    Start recording
C-x )    Stop recording

C-x e    execute macro (e to repeat)
C-u 10 C-x e  execute macro 10 times

http://www.emacswiki.org/emacs/KeyboardMacros

http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros

*** temporary example

Keyboard Macros

Begin recording: C-x (
End recording: C-x )
Execute macro: C-x e
Example: Add 'extern' before all function protoypes in a file.
Go to the first prototype, and say:

    C-x (
    C-a
    extern<SPACE>
    C-n
    C-x )
Then say C-u 50 C-x e to replace 50 prototypes.


** Links
[[http://www.learningclojure.com/2009/12/favourite-keys-for-emacs-and-slime.html][Learning Clojure: Favourite keys for EMACS and SLIME]]

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Expressions.html][Expressions - GNU Emacs Manual]]

[[http://www.math.uh.edu/~bgb/emacs_keys.html][Emacs key combinations]]


** org
[[file:d:/docs/Misc/emacs/orgcard-7.8.pdf][org-mode reference]]

[[http://orgmode.org/org.html][org manual (online)]]

** little hacks

*** Default folder
When emacs starts, the home folder should be the current folder. Put this in .emacs, 

(cd "~")

*** Export dev notes

Open ~/dev.org
C-c C-e b

This will export to org.html and also open the file in browser. 

C-c C-e h Export only 


*** 

;; save and restore my buffers every time
(desktop-save-mode 1)

;; show me line and column nos
(line-number-mode t)
(column-number-mode t)

;; cscope
(require 'xcscope)
(setq cscope-do-not-update-database t)

;; show date and time in mode-line
(setq display-time-day-and-date t )

(display-time)





** mark ring
There are local and global mark rings.

cua-set-mark 

Default bindings: C-@ and C-SPC

Toggle mark.


Move back in mark ring using all of these command.
C-u C-SPC
C-u C-@

C-x C-SPC
C-x C-@

*** TODO How do we move forward in mark ring once we've gone back?

** registers 
point-to-register

C-x r SPC a           Save current location in register a

C-x r j a             Go back to that location or restore that configuration.

Registers are characters

List of registers   list-registers in register.el



** calculator
M-x calculator


Change input base: i (b | o | h)
Change output base: o (b | o | h)


** [[file:.emacs][.emacs]]

** desktop and other layout

*** TODO How to save / restore desktop?

*** TODO How to save / restore buffers? Open a number of buffers on startup.


* linux

** reload profile

After changing the bash profile, you need to reload it:

$ source ~/.bashrc

$ source ~/.profile


* Clojure

Use project [[file:d:/docs/Clojure/projects/clj][here]] to try out code. 

Click on the link and a dired buffer will open. From there use 

M-x clojure-jack-in

to run swank and connect slime into it.

** destructuring

[[http://blog.jayfields.com/2010/07/clojure-destructuring.html][Clojure: Destructuring by Jay Fields]]

Assign the values of a vector:

user=> (def point [5 7])
#'user/point

user=> (let [[x y] point]
         (println "x:" x "y:" y))
x: 5 y: 7

Split a vector into a head and a tail:

user=> (def indexes [1 2 3])
#'user/indexes

user=> (let [[x & more] indexes]
         (println "x:" x "more:" more))
x: 1 more: (2 3)

Note the use of arglist**. It can be used in function parameters and in destructuring.

Bind the entire vector to a local using :as

user=> (def indexes [1 2 3])
#'user/indexes

user=> (let [[x & more :as full-list] indexes]
         (println "x:" x "more:" more "full list:" full-list))
x: 1 more: (2 3) full list: [1 2 3]


Destructuring a map

user=> (def point {:x 5 :y 7})
#'user/point

user=> (let [{x :x y :y} point]
         (println "x:" x "y:" y))
x: 5 y: 7

The use of :keys directive while destruturing a map

As the above illustrates, we often need to have local variables to be named as the keys of the map
we are destructuring. To avoid doing it manually, :keys directive is provided:

user=> (def point {:x 5 :y 7})
#'user/point

user=> (let [{:keys [x y]} point]
         (println "x:" x "y:" y))
x: 5 y: 7

It is also possible to use both :keys and :as directives:

user=> (def point {:x 5 :y 7})
#'user/point

user=> (let [{:keys [x y] :as the-point} point]
         (println "x:" x "y:" y "point:" the-point))
x: 5 y: 7 point: {:x 5, :y 7}

The :or directive
Assign a default value to a key when the map does not contain a specified key:

user=> (def point {:y 7})
#'user/point
 
user=> (let [{:keys [x y] :or {x 0 y 0}} point]
         (println "x:" x "y:" y))
x: 0 y: 7

Lastly, it's also worth noting that you can destructure nested maps, vectors and a combination of both.

The following example destructures a nested map

user=> (def book {:name "SICP" :details {:pages 657 :isbn-10 "0262011530"}})
#'user/book

user=> (let [{name :name {pages :pages isbn-10 :isbn-10} :details} book]
         (println "name:" name "pages:" pages "isbn-10:" isbn-10))
name: SICP pages: 657 isbn-10: 0262011530


As you would expect, you can also use directives while destructuring nested maps.

user=> (def book {:name "SICP" :details {:pages 657 :isbn-10 "0262011530"}})
#'user/book
user=> 
user=> (let [{name :name {:keys [pages isbn-10]} :details} book]
         (println "name:" name "pages:" pages "isbn-10:" isbn-10))
name: SICP pages: 657 isbn-10: 0262011530

Destructuring nested vectors is also very straight-forward, as the following example illustrates

user=> (def numbers [[1 2][3 4]])
#'user/numbers

user=> (let [[[a b][c d]] numbers]
  (println "a:" a "b:" b "c:" c "d:" d))
a: 1 b: 2 c: 3 d: 4

The following example destructures a map and a vector at the same time.
user=> (def golfer {:name "Jim" :scores [3 5 4 5]})
#'user/golfer

user=> (let [{name :name [hole1 hole2] :scores} golfer] 
         (println "name:" name "hole1:" hole1 "hole2:" hole2))
name: Jim hole1: 3 hole2: 5
The same example can be rewritten using a function definition to show the simplicity of using destructuring in parameter lists.
user=> (defn print-status [{name :name [hole1 hole2] :scores}] 
  (println "name:" name "hole1:" hole1 "hole2:" hole2))
#'user/print-status

user=> (print-status {:name "Jim" :scores [3 5 4 5]})
name: Jim hole1: 3 hole2: 5
There are other (less used) directives and deeper explanations available on http://clojure.org/special_forms and in The Joy of Clojure. I recommend both.

**(defn do-something [x y & more] ... )

Comment by Fogus:

Nice post. One other note that naturally follows from the end of your post is that destructuring forms the basis of Clojure's named arguments:

(defn print-status [& {name :name [hole1 hole2] :scores}] 
(println "name:" name "hole1:" hole1 "hole2:" hole2))

(print-status :name "Joey" :scores [42 18])


You can also use pre-conditions to check if certain arguments are passed in:


(defn print-status [& {name :name [hole1 hole2] :scores}]
{:pre [name]}
(println "name:" name "hole1:" hole1 "hole2:" hole2))

(print-status :scores [42 18])
; java.lang.AssertionError: Assert failed: name

(print-status :name "Joey" :scores [42 18])
; name: Joey hole1: 42 hole2: 18


** ClojureScript One
*** [[file:~/dev-notes/documentation.html][Marginalia]]

*** [[file:One1.pdf][ClojureScript One wiki as pdf]]

Arrived at the pdf from a strange route. Copy/pasted all wiki pages into OneNote. Adjusted some
links. Then printed pdf from OneNote. Crazy! There must be a direct way to export pdf from github
wiki.

**** TODO Export github wiki to pdf

** Clojure cheat sheets
https://github.com/fogus/clojure-cheatsheets

[[file:cheatsheet-a4-color.pdf][Clojure Cheatseet]]

[[file:cljs-cheatsheet.pdf][ClojureScript Cheatsheet]]



* git

[[file:git_cheat_sheet.pdf][git cheat sheet by roger dudler]]


* JavaScript

https://developer.mozilla.org/en/JavaScript/A_re-introduction_to_JavaScript

http://ejohn.org/apps/learn/

* Misc

** TODO export git hub wiki into pdf

I want to read [[https://github.com/brentonashworth/one/wiki][one]] wiki offline. What is the best way to do that?

** calculate date difference using Joda time
This is just insanely intuitive!


Date expiryDate = new Date(2008, 10, 10);
Date currentDate = new Date(2012, 03, 14);
int days = Days.daysBetween(new DateTime(expiryDate), new DateTime(currentDate)).getDays(); 
int years = Years.yearsBetween(new DateTime(expiryDate), new DateTime(currentDate)).getYears();
System.out.printf("Years: %d, days: %d\n", years, days);

=>   Years: 3, days: 1251


Period period = new Period(new DateTime(expiryDate), new DateTime(currentDate));

System.out.printf("Period: %s; years: %d, months: %d days: %d\n", period, period.getYears(), period.getMonths(), period.getDays());

=> Period: P3Y5M4D; years: 3, months: 5 days: 4

Period periodYearDay = new Period(new DateTime(expiryDate), new DateTime(currentDate), PeriodType.yearDay());

System.out.printf("Period: %s; years: %d days: %d\n", periodYearDay, periodYearDay.getYears(), periodYearDay.getDays());

=> Period: P3Y156D; years: 3 days: 156

http://joda-time.sourceforge.net/faq.html

